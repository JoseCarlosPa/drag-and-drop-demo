{"version":3,"sources":["components/InputFeild.tsx","components/SingleToDo.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["InputFeild","toDo","setToDo","handleAdd","className","onSubmit","e","type","placeholder","value","onChange","target","SingleToDo","index","toDos","setToDos","useState","edit","setEdit","editToDo","setEditToDo","draggableId","id","toString","provided","preventDefault","map","handleEdit","draggableProps","dragHandleProps","ref","innerRef","state","onClick","filter","TodoList","doing","setDoing","completedToDos","setcompletedToDos","droppableId","droppableProps","App","onDragEnd","result","source","destination","add","active","progress","complete","splice","console","log","Date","now","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.65b8de16.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './styles.css';\r\n\r\ninterface Props {\r\n    toDo: string;\r\n    setToDo: React.Dispatch<React.SetStateAction<string>>;\r\n    handleAdd: (e: React.FormEvent) => void;\r\n}\r\n\r\nconst InputFeild: React.FC<Props> = ({toDo, setToDo, handleAdd}: Props) => {\r\n\r\n    return (\r\n        <form className=\"input\" onSubmit={(e) => handleAdd(e)}>\r\n            <input type=\"input\" placeholder=\"Nueva tarjeta\" className=\"inputBox\" value={toDo}\r\n                   onChange={(e) => setToDo(e.target.value)}/>\r\n            <button className=\"inputSubmit\">Registrar</button>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default InputFeild\r\n","import React, {useState} from \"react\";\r\nimport {Draggable} from \"react-beautiful-dnd\";\r\nimport {AiFillEdit, AiFillDelete} from \"react-icons/all\";\r\nimport {ToDo} from \"../models/model\";\r\nimport './styles.css';\r\n\r\ninterface props {\r\n    index: number;\r\n    toDo: ToDo;\r\n    toDos: ToDo[];\r\n    setToDos: React.Dispatch<React.SetStateAction<ToDo[]>>;\r\n\r\n}\r\n\r\nconst SingleToDo = ({index, toDo, toDos, setToDos}: props) => {\r\n\r\n    // UseSates para edición de una tarjeta\r\n\r\n    const [edit, setEdit] = useState<boolean>(false);\r\n    const [editToDo, setEditToDo] = useState<string>(toDo.toDo);\r\n\r\n    /*\r\n    * Handle para editar una tarjeta\r\n    * Input: event:React Form Event & id:number\r\n    * Output: Edición en tarjeta elegida segun el id\r\n    */\r\n    const handleEdit = (e: React.FormEvent, id: number) => {\r\n        e.preventDefault();\r\n        setToDos(toDos.map((toDo) => (\r\n            toDo.id === id ? {...toDo, toDo: editToDo} : toDo))\r\n        );\r\n        setEdit(false);\r\n    };\r\n\r\n    /*\r\n    * Handel para eliminar una tarjeta\r\n    * Input: id:number -> Id de la tarjeta\r\n    * OutPut: Action event delete\r\n    */\r\n    const handleDelete = (id: number) => {\r\n        setToDos(toDos.filter((toDo) => toDo.id !== id))\r\n    };\r\n\r\n    return (\r\n        <Draggable draggableId={toDo.id.toString()} index={index}>\r\n            {\r\n                (provided) => (\r\n                    <form\r\n                        className=\"toDoSingle\"\r\n                        onSubmit={(e) => handleEdit(e, toDo.id)}\r\n                        {...provided.draggableProps}\r\n                        {...provided.dragHandleProps}\r\n                        ref={provided.innerRef}\r\n                    >\r\n                        {edit ? (\r\n                            <input value={editToDo} onChange={(e) => setEditToDo(e.target.value)}\r\n                                   className=\"todoSingleText\"/>\r\n                        ) : toDo.state ? (\r\n                            <span className=\"todoSingleText\">{toDo.toDo}</span>\r\n                        ) : (\r\n                            <span className=\"todoSingleText\">{toDo.toDo}</span>\r\n                        )}\r\n                        <div>\r\n                            <span className=\"icon\" onClick={() => {\r\n                                if (!edit) {\r\n                                    setEdit(!edit)\r\n                                }\r\n                            }}>\r\n                                <AiFillEdit/>\r\n                            </span>\r\n                            <span className=\"icon\" onClick={() => handleDelete(toDo.id)}>\r\n                                <AiFillDelete/>\r\n                            </span>\r\n                        </div>\r\n                    </form>\r\n                )\r\n            }\r\n        </Draggable>\r\n    );\r\n}\r\n\r\nexport default SingleToDo\r\n","import React from \"react\";\r\nimport SingleToDo from \"./SingleToDo\";\r\nimport {Droppable} from \"react-beautiful-dnd\";\r\nimport {ToDo} from \"../models/model\";\r\nimport \"./styles.css\";\r\n\r\ninterface props {\r\n    toDos: ToDo[];\r\n    setToDos: React.Dispatch<React.SetStateAction<ToDo[]>>;\r\n    doing: ToDo[];\r\n    setDoing: React.Dispatch<React.SetStateAction<ToDo[]>>;\r\n    completedToDos: ToDo[];\r\n    setcompletedToDos: React.Dispatch<React.SetStateAction<ToDo[]>>;\r\n}\r\n\r\nconst TodoList = ({toDos, setToDos, doing, setDoing, completedToDos, setcompletedToDos}: props) => {\r\n    return (\r\n        <div className=\"container\">\r\n\r\n            {/*Columna de Cosas pór hacer, por ende aqui si enviaran todas lastarjetas nuevas*/}\r\n            <Droppable droppableId=\"ToDoList\">\r\n                {\r\n                    (provided) => (\r\n                        <div className=\"toDos\" ref={provided.innerRef}{...provided.droppableProps}>\r\n                            <span className=\"toDosHeading\">\r\n                                Por Hacer\r\n                            </span>\r\n                            {\r\n                                toDos.map((toDo, index) => (\r\n                                    <SingleToDo\r\n                                        index={index}\r\n                                        toDo={toDo}\r\n                                        toDos={toDos}\r\n                                        setToDos={setToDos}\r\n                                        key={toDo.id}/>\r\n                                ))\r\n                            }\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )\r\n                }\r\n            </Droppable>\r\n\r\n            {/*Columna de cosas en progreso*/}\r\n            <Droppable droppableId=\"Doing\">\r\n                {\r\n                    (provided) => (\r\n                        <div className=\"toDos doing\" ref={provided.innerRef}{...provided.droppableProps}>\r\n                            <span className=\"toDosHeading\">\r\n                                En progreso\r\n                            </span>\r\n                            {\r\n                                doing.map((toDo, index) => (\r\n                                    <SingleToDo\r\n                                        index={index}\r\n                                        toDo={toDo}\r\n                                        toDos={doing}\r\n                                        setToDos={setDoing}\r\n                                        key={toDo.id}/>\r\n                                ))\r\n                            }\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )\r\n                }\r\n\r\n            </Droppable>\r\n\r\n            {/*Columna de cosas Terminadas*/}\r\n            <Droppable droppableId=\"completedToDos\">\r\n                {\r\n                    (provided) => (\r\n                        <div className=\"toDos done\" ref={provided.innerRef}{...provided.droppableProps}>\r\n                            <span className=\"toDosHeading\">\r\n                                Terminados\r\n                            </span>\r\n                            {\r\n                                completedToDos.map((toDo, index) => (\r\n                                    <SingleToDo\r\n                                        index={index}\r\n                                        toDo={toDo}\r\n                                        toDos={toDos}\r\n                                        setToDos={setcompletedToDos}\r\n                                        key={toDo.id}/>\r\n                                ))\r\n                            }\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )\r\n                }\r\n            </Droppable>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TodoList\r\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport InputFeild from './components/InputFeild';\r\nimport {ToDo} from \"./models/model\";\r\nimport TodoList from \"./components/TodoList\";\r\nimport {DragDropContext, DropResult} from 'react-beautiful-dnd';\r\n\r\nconst App: React.FC = () => {\r\n\r\n    const [toDo, setToDo] = useState<string>(\"\");\r\n    const [toDos, setToDos] = useState<ToDo[]>([]); // de tipo \"ToDo\" , arreglo que permitira tener todas las tarjetas\r\n    const [doing, setDoing] = useState<ToDo[]>([]);\r\n    const [completedToDos, setcompletedToDos] = useState<ToDo[]>([]);\r\n\r\n    const handleAdd = (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n\r\n        if (toDo) {\r\n            setToDos([...toDos, {id: Date.now(), toDo: toDo, state: \"To Do\"}])\r\n            setToDo(\"\");\r\n        }\r\n    }\r\n\r\n    const onDragEnd = (result: DropResult) => {\r\n\r\n        const {source, destination} = result;\r\n        if (!destination) return;\r\n        if (destination.droppableId === source.droppableId && destination.index === source.index) return;\r\n        let add,\r\n            active = toDos,\r\n            progress = doing,\r\n            complete = completedToDos;\r\n\r\n        // Checamos a que parte del Droppable id corresponde y se lo quitamos según nos regrese el API\r\n        if (source.droppableId === 'ToDoList') {\r\n            add = active[source.index];\r\n            active.splice(source.index, 1);\r\n        } else if(source.droppableId === 'Doing') {\r\n            add = progress[source.index];\r\n            progress.splice(source.index, 1);\r\n\r\n        }else{\r\n            add = complete[source.index];\r\n            complete.splice(source.index, 1);\r\n\r\n        }\r\n\r\n        // Ahora Agregamos lo que se quito al source destino\r\n        if (destination.droppableId === 'ToDoList') {\r\n            active.splice(destination.index,0,add)\r\n\r\n        } else if(destination.droppableId === 'Doing') {\r\n            progress.splice(destination.index,0,add)\r\n            console.log('paso por Doing');\r\n        }else{\r\n            complete.splice(destination.index,0,add)\r\n        }\r\n\r\n        // Agregarlo a nuestro estado\r\n        setcompletedToDos(complete);\r\n        setDoing(progress);\r\n        setToDos(active);\r\n    }\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <div className=\"App\">\r\n                <span className=\"heading\">LeadSales</span>\r\n                <InputFeild\r\n                    toDo={toDo}\r\n                    setToDo={setToDo}\r\n                    handleAdd={handleAdd}\r\n                />\r\n                <TodoList\r\n                    toDos={toDos}\r\n                    setToDos={setToDos}\r\n                    doing={doing}\r\n                    setDoing={setDoing}\r\n                    completedToDos={completedToDos}\r\n                    setcompletedToDos={setcompletedToDos}\r\n                />\r\n            </div>\r\n        </DragDropContext>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}